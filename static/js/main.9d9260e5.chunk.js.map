{"version":3,"sources":["components/Button.jsx","components/Display.jsx","main/Calculator.jsx","reportWebVitals.js","index.js"],"names":["Button","this","props","operation","label","double","triple","click","className","onClick","event","Component","Display","value","initialState","displayValue","clearDisplay","values","indexValues","Calculator","setOperation","state","setState","equals","currentOperation","result","addDigit","n","includes","i","newValue","parseFloat","console","log","clearMemory","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d9260e5.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Button.css';\n\nclass Button extends Component {\n  // clickButtons (event) {\n  //   this.props.click && this.props.click(event.target.innerHTML);\n  // }\n  render() {\n    const { operation, label, double, triple, click } = this.props;\n    return(\n      <button className={`\n        button\n        ${ operation ? 'operation' : '' }\n        ${ double ? 'double' : '' }\n        ${ triple ? 'triple' : '' }\n      `}\n      onClick={(event) => click && click(label)}\n      // A linha de código acima também pode ser executada desses modos:\n      // 1 - onClick={ this.clickButtons } \n      // 2 - onClick={(event) => click && click(event.target.innerHTML)}\n      >\n        { label }\n      </button>\n  );\n  }\n}\n\nexport default Button;\n","import React, { Component } from 'react';\nimport './Display.css';\n\nclass Display extends Component {\n  render() {\n    return(\n      <div className=\"display\">\n        { this.props.value }\n      </div>\n    );\n  }\n}\n\nexport default Display;","import React, { Component } from 'react';\nimport './Calculator.css';\nimport Button from '../components/Button';\nimport Display from '../components/Display';\n\nconst initialState = {\n  displayValue: '0',\n  clearDisplay: false,\n  operation: null,\n  values: [0, 0],\n  indexValues: 0\n}\n\nclass Calculator extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = initialState;\n    // this.state = {...initialState};\n  }\n  \n// ------------------------FUNÇÕES------------------------------------\n\n  clearMemory() {\n    this.setState(initialState);\n    // this.setState({...initialState});\n  }\n\n  setOperation = (operation) => {\n    if (this.state.indexValues === 0) {\n      this.setState({\n        indexValues: 1,\n        operation,\n        clearDisplay: true,\n      });\n    } else {\n      const equals = operation === '=';\n      const currentOperation = this.state.operation;\n\n      const values = [...this.state.values];\n      // A linha de código acima também pode ser executada desse modo:\n      // const values = this.state.values;\n\n      // Nestas próximas linhas de código implementarei as operações matemáticas\n      let result = 0;\n      switch (currentOperation) {\n        case '+':\n          result = values[0] + values[1];\n          values[0] = result;\n          values[1] = 0;\n          break;\n        case \"-\":\n          result = values[0] - values[1];\n          values[0] = result;\n          values[1] = 0;\n          break;\n        case \"*\":\n          result = values[0] * values[1];\n          values[0] = result;\n          values[1] = 0;\n          break;\n          case \"/\":\n            result = values[0] / values[1];\n            values[0] = result;\n            values[1] = 0;\n            break\n          default:\n      }\n\n      this.setState({\n        displayValue: values[0],\n        operation: equals ? null : operation,\n        indexValues: equals ? 0 : 1,\n        clearDisplay: !equals,\n        values\n      })\n    }\n  }\n\n  addDigit = (n) => {\n    if (n === '.' && this.state.displayValue.includes('.')) {\n      return\n    }\n    const clearDisplay = this.state.displayValue === '0'\n      || this.state.clearDisplay;\n    const currentValue = clearDisplay ? '' : this.state.displayValue;\n    const displayValue = currentValue + n \n    this.setState({\n      clearDisplay: false,\n      displayValue,\n    })\n    if (n !== '.') {\n      const i = this.state.indexValues;\n      const newValue = parseFloat(displayValue)\n      const values = [...this.state.values];\n      // A linha de código acima também pode ser executada desse modo:\n      // const values = this.state.values;\n      values[i] = newValue;\n      this.setState({ values });\n      console.log(values)\n    }\n  }\n\n// --------------------------------------------------------------------\n  render() {\n    // também podemos transformar as funções normais acima em arrow:\n    const clearMemory = () => this.clearMemory();\n\n    const { displayValue } = this.state;\n    return(\n      <div className=\"calculator\">\n        <Display value={displayValue} />\n        <Button label=\"AC\" click={ clearMemory } triple />\n        <Button label=\"/\"  click={ this.setOperation } operation />\n        <Button label=\"7\" click={ this.addDigit } />\n        <Button label=\"8\" click={ this.addDigit } />\n        <Button label=\"9\" click={ this.addDigit } />\n        <Button label=\"*\" click={ this.setOperation } operation />\n        <Button label=\"4\" click={ this.addDigit } />\n        <Button label=\"5\" click={ this.addDigit } />\n        <Button label=\"6\" click={ this.addDigit } />\n        <Button label=\"-\" click={ this.setOperation } operation />\n        <Button label=\"1\" click={ this.addDigit } />\n        <Button label=\"2\" click={ this.addDigit } />\n        <Button label=\"3\" click={ this.addDigit } />\n        <Button label=\"+\" click={ this.setOperation } operation />\n        <Button label=\"0\" click={ this.addDigit } double />\n        <Button label=\".\" click={ this.addDigit } />\n        <Button label=\"=\" click={ this.setOperation } operation />\n\n      </div>\n    );\n  }\n}\n\nexport default Calculator;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Calculator from './main/Calculator';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <>\n      <h1>Calculadora</h1>\n      <Calculator />\n    </>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}